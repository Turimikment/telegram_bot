import os
import requests
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from flask import Flask
import threading
import time

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
HF_API_TOKEN = os.getenv("HF_API_TOKEN")
MODEL_NAME = "Qwen/Qwen2.5-1.8B-Instruct"
API_URL = f"https://api-inference.huggingface.co/models/{MODEL_NAME}"

headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ"

@app.route('/health')
def health():
    return "OK", 200

# –•—Ä–∞–Ω–∏–º –¥–∏–∞–ª–æ–≥–∏
user_conversations = {}

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_conversations[message.from_user.id] = [
        {
            "role": "system",
            "content": "–¢—ã ‚Äî –¥–∏—Ä–µ–∫—Ç–æ—Ä –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã. –¢—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É. "
                      "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑—á–∏–∫: –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∂–∞—Ä–≥–æ–Ω–∞. –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
        }
    ]
    await message.answer(
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
        "–Ø ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑—á–∏–∫. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "- –ö—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏?\n"
        "- –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω—ã?\n"
        "- –ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?\n\n"
        "–Ø –æ—Ç–≤–µ—á—É, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª–∏–µ–Ω—Ç!"
    )

@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if user_id not in user_conversations:
        user_conversations[user_id] = [
            {
                "role": "system",
                "content": "–¢—ã ‚Äî –¥–∏—Ä–µ–∫—Ç–æ—Ä –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã. –¢—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É. "
                      "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑—á–∏–∫: –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∂–∞—Ä–≥–æ–Ω–∞. –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
            }
        ]

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_conversations[user_id].append({"role": "user", "content": message.text})

    try:
        response = requests.post(
            API_URL,
            headers=headers,
            json={
                "inputs": user_conversations[user_id][-6:],
                "parameters": {
                    "max_new_tokens": 200,
                    "temperature": 0.7,
                    "return_full_text": False
                }
            },
            timeout=30
        )

        if response.status_code == 200:
            answer = response.json()[0]["generated_text"]
            user_conversations[user_id].append({"role": "assistant", "content": answer})
            await message.answer(answer)
        elif response.status_code == 503:
            await message.answer("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10‚Äì20 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.")
        elif response.status_code == 429:
            await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.")
        else:
            await message.answer("–ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
        print("–û—à–∏–±–∫–∞:", e)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def run_bot():
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ–±—Ö—É–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    loop.run_until_complete(bot.delete_webhook())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    max_retries = 5
    retry_delay = 10  # —Å–µ–∫—É–Ω–¥
    
    for attempt in range(max_retries):
        try:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {attempt + 1}/{max_retries}")
            executor.start_polling(dp, skip_updates=True, relax=1)
            break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            if attempt < max_retries - 1:
                print(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(retry_delay)
            else:
                print("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask
def run_flask():
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

# –ó–∞–ø—É—Å–∫ –∏ –±–æ—Ç–∞, –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    # –î–∞–µ–º –≤—Ä–µ–º—è Flask –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    time.sleep(3)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    run_bot()