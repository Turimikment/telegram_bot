import os
import requests
from aiogram import Bot, Dispatcher, types

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
HF_API_TOKEN = os.getenv("HF_API_TOKEN")
MODEL_NAME = "Qwen/Qwen2.5-1.8B-Instruct"

# URL –¥–ª—è Inference API
API_URL = f"https://api-inference.huggingface.co/models/{MODEL_NAME}"

headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –ü—Ä–æ—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
user_conversations = {}

@dp.message(Command("start"))
async def start(message: types.Message):
    user_conversations[message.from_user.id] = [
        {
            "role": "system",
            "content": "–¢—ã ‚Äî –∑–∞–∫–∞–∑—á–∏–∫ —Å–∏—Å—Ç–µ–º—ã. –¢—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. "
                      "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫: –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ, –Ω–æ –ø–æ –¥–µ–ª—É. –ì–æ–≤–æ—Ä–∏ –∫—Ä–∞—Ç–∫–æ ‚Äî 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
        }
    ]
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑—á–∏–∫.\n"
        "–ó–∞–¥–∞–≤–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∏—Å—Ç–µ–º–µ, –∫–æ—Ç–æ—Ä—É—é —è —Ö–æ—á—É —Å–æ–∑–¥–∞—Ç—å.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "- –ö—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏?\n"
        "- –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω—ã?\n"
        "- –ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?\n\n"
        "–Ø –æ—Ç–≤–µ—á—É, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª–∏–µ–Ω—Ç!"
    )

@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    if user_id not in user_conversations:
        user_conversations[user_id] = [
            {
                "role": "system",
                "content": "–¢—ã ‚Äî –∑–∞–∫–∞–∑—á–∏–∫ —Å–∏—Å—Ç–µ–º—ã. –¢—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—É –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. "
                          "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫: –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ, –Ω–æ –ø–æ –¥–µ–ª—É. –ì–æ–≤–æ—Ä–∏ –∫—Ä–∞—Ç–∫–æ ‚Äî 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
            }
        ]

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_conversations[user_id].append({"role": "user", "content": message.text})

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å –¥–∏–∞–ª–æ–≥ –≤ –º–æ–¥–µ–ª—å
        response = requests.post(
            API_URL,
            headers=headers,
            json={
                "inputs": user_conversations[user_id][-10:],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                "parameters": {
                    "max_new_tokens": 200,
                    "temperature": 0.7,
                    "return_full_text": False
                }
            }
        )

        if response.status_code == 200:
            answer = response.json()[0]["generated_text"]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            user_conversations[user_id].append({"role": "assistant", "content": answer})
            await message.answer(answer)
        else:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ–±—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
            await message.answer("–°–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            print("–û—à–∏–±–∫–∞ Hugging Face:", response.status_code, response.text)

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
        print("Exception:", e)

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)